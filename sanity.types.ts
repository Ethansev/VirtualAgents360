/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type MortgageTransaction = {
  _id: string;
  _type: "mortgageTransaction";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  agent?: string;
  subjectProperty?: string;
  status?: "pending" | "approved" | "needsAttention";
  stage?: "addPropertyInformation" | "newTransactionRegistration" | "addChange" | "edmDocumentUpload" | "instructionToPayCommission" | "commissionDisbursement";
};

export type RealEstateTransaction = {
  _id: string;
  _type: "realEstateTransaction";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  subjectProperty?: string;
  agent?: string;
  status?: "pending" | "approved" | "needsAttention";
  stage?: "addPropertyInformation" | "transactionRegistration" | "addChange" | "edmDocumentUpload" | "instructionToPayCommission" | "commissionDisbursement";
  propertyInformation?: {
    agentAOR?: string;
    propertyAddress?: string;
    city?: string;
    state?: string;
    zipcode?: string;
    clientEmail?: string;
    clientFirstName?: string;
    clientMiddleName?: string;
    clientLastName?: string;
    propertyType?: "sfr" | "condo" | "pud" | "townHome" | "2-4Units" | "residentialIncome" | "highRiseCondo" | "commercial" | "manufactured" | "vacantLot" | "other";
    transactionType?: "realEstateSellerRepresentation" | "realEstateBuyerRepresentation" | "leaseLandlordRepresentation" | "leaseTenantRepresentation" | "other";
    primaryAgent?: string;
    coopAgent1?: string;
    coopAgent2?: string;
  };
  transactionRegistration?: {
    transactionRegistrationType?: "newListingSale" | "newListingLease" | "openEscrowListing" | "openEscrowSale";
    newListingSale?: {
      smartBuyCombo?: {
        first?: "yes" | "no";
        second?: "yes" | "no";
        third?: "yes" | "no";
        fourth?: "one" | "two" | "three" | "four";
      };
      listingDate?: string;
      expirationDate?: string;
      mlsNumber?: string;
      listingPrice?: string;
      listingOfficeCompPercentage?: string;
      listingOfficeCompAmount?: string;
      sellerFirstName?: string;
      sellerLastName?: string;
      sellerEmail?: string;
      receivedListingAgreement?: boolean;
      specialInstructions?: string;
    };
    newListingLease?: {
      listingDate?: string;
      expirationDate?: string;
      mlsNumber?: string;
      listingPrice?: string;
      listingOfficeCompPercentage?: string;
      listingOfficeCompAmount?: string;
      ownerFirstName?: string;
      ownerLastName?: string;
      ownerEmail?: string;
      receivedListingAgreement?: boolean;
      specialInstructions?: string;
    };
    openEscrowSale?: {
      smartBuyCombo?: {
        first?: "yes" | "no";
        second?: "yes" | "no";
        third?: "yes" | "no";
        fourth?: "one" | "two" | "three" | "four";
      };
      dateReceived?: string;
      receivedFrom?: string;
      amount1?: string;
      formOfReceipt?: "Personal Check" | "Cashier's Check" | "Cash" | "Other";
      disbursementDate?: string;
      amount2?: string;
      escrowCompany?: string;
      methodOfDisbursement?: "Funds forwarded to escrow" | "Funds returned to buyer" | "Other";
      openEscrowDate?: string;
      estimatedClosingDate?: string;
      salePrice?: string;
      listingOffice?: string;
      listingAgent?: string;
      listingEmail?: string;
      listingPhone?: string;
      escrowCompany2?: string;
      escrowOfficer?: string;
      escrowEmail?: string;
      escrowPhone?: string;
      titleCompany?: string;
      titleOfficer?: string;
      titleEmail?: string;
      titlePhone?: string;
      specialInstructions?: string;
    };
    openEscrowListing?: {
      smartBuyCombo?: {
        first?: "yes" | "no";
        second?: "yes" | "no";
        third?: "yes" | "no";
        fourth?: "one" | "two" | "three" | "four";
      };
      openEscrowDate?: string;
      estimatedClosingDate?: string;
      salePrice?: string;
      sellingOffice?: string;
      sellingAgent?: string;
      sellingEmail?: string;
      sellingPhone?: string;
      escrowCompany?: string;
      escrowOfficer?: string;
      escrowEmail?: string;
      escrowPhone?: string;
      titleCompany?: string;
      titleOfficer?: string;
      titleEmail?: string;
      titlePhone?: string;
      specialInstructions?: string;
    };
    openEscrowReferral?: {
      openEscrowDate?: string;
      estimatedClosingDate?: string;
      salePrice?: number;
      listingOffice?: string;
      listingAgent?: string;
      listingEmail?: string;
      listingPhone?: number;
      escrowCompany?: string;
      escrowOfficer?: string;
      escrowEmail?: string;
      escrowPhone?: number;
      titleCompany?: string;
      titleOfficer?: string;
      titleEmail?: string;
      titlePhone?: number;
      specialInstructions?: string;
    };
  };
  addChange?: {
    transactionType?: string;
  };
  edmDocumentUpload?: {
    transactionType?: string;
  };
  instructionToPayCommission?: {
    transactionType?: string;
  };
  commissionDisbursement?: {
    transactionType?: string;
  };
};
export declare const internalGroqTypeReferenceTo: unique symbol;

